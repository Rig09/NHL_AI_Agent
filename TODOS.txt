Priorities:
1. 3 lines with sql imports, changed depending on how you run in terminal (sqlite imports in rag chains and db init). Candidate solution would be through argparse in app.py, but can explore other solutions
    a. Accounting for Streamlit local vs Streamlit remote run config
    b. Accounting for local vs Azure DB run config
2. Home plate plotting
    a. See NHLRink Python plot code for location dimensions to make chart boundaries. https://github.com/the-bucketless/hockey_rink/blob/master/examples/drawing.ipynb
3. PuckPedia API interaction (in progress, waiting on reply)
4. Being able to handle the following query: In the last 30 days, which 3 forward lines lead the NHL in expected goals%? (and similar)
    a. Append game date to shots DB (Possibly using NHL API to extract date from game IDs?)
    b. Logic for finding the last 30 days listed? Possibly get date tool?



I. Possible NHL API interaction, started https://github.com/Rig09/NHL_AI_Agent/blob/nhl-api-tool/src/chains/nhl_api_chain.py
    a. Understand how to determine between normal API + Azure MoneyPuck advanced stats 
    b. Possibly look at other endpoints in the API, as example only code above has a few endpoints

II. Move RAG Chroma DB to cloud.

Code Reorganization
- Function comments 
- File + function renaming
- Retest all src/util files
- Debug deprecation warnings after running streamlit run

Environment/Setup
- Complete shell scripts for data install, DB setup + pip env setup
- Outline plan for tests of the setup to ensure consistency

Testing/Performance
- Time each component of the chain while running.
- Write mock tests for each function
- Remove unused imports
- Tune DB schema to be more efficient?

Cloud
- Request throttling
- API Key Usage monitoring

Admin
- Rewrite README

Deployment
- CI/CD?

STRETCH FEATURES:
Player Cards
- DISCUSS: MoneyPuck skater data only includes the last team that they played for. Does not include the same player's season split over multiple teams.
- Considerations for player card efficiency (calculation, storing, frontend rendering, etc.)
- Player card headshots? https://assets.nhle.com/mugs/nhl/20232024/TOR/8479318.png, or NHL API?

Our Own XG Modelling
- Discuss additional features from new MoneyPuck dataset in XG Modelling
- Explain train/test overlap

MISC STRETCH IDEAS
- Tune LLM related settings. Try multiple models?
- If you know a player's XG% you can see how that changes over game stages? (OT, 3rd period, etc). 
    Can also see how well they convert on their XG during those times.
- Input a shot and see the XG from it?
- Player similarity/comparisons
- Player progression predictions/forecasting

MISC RESOURCES:
Evolving Article: https://evolving-hockey.com/blog/a-new-expected-goals-model-for-predicting-goals-in-the-nhl/
MoneyPuck Data: https://moneypuck.com/data.htm
MoneyPuck About: https://moneypuck.com/about.htm
NHL Ice Plotting in Python: https://thecommutesports.com/2022/08/06/creating-nhl-shot-maps-with-python/
NHL API GitLab: https://gitlab.com/dword4/nhlapi
LangSmith Testing Video
Deeplearning.ai Agent Eval
Possible Azure Frontend? https://github.com/Azure-Samples/azure-search-openai-demo/
